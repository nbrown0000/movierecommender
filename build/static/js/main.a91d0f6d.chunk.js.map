{"version":3,"sources":["components/SearchBox/SearchBox.js","components/Card/Card.js","components/CardContainer/CardContainer.js","components/SelectedCardPanel/SelectedCardPanel.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","onInputChange","onClickSearch","onInputPressEnter","className","onChange","onKeyDown","onClick","Card","movie","setSelectedMovie","style","selectedMovie","id","border","width","height","poster_path","original_title","src","alt","CardContainer","moviesList","route","onClickStartAgain","containerClass","length","Fragment","map","i","key","SelectedCardPanel","genreIdToName","genre_ids","result","forEach","props","genreList","item","push","name","join","this","release_date","overview","slice","getRecommendedMovies","React","Component","REACT_APP_API_URL","App","event","setState","input","target","value","keyCode","state","alert","fetch","method","headers","body","JSON","stringify","then","response","json","data","recommendedMovies","genres","sortedMoviesList","sort","a","b","sortedRecommendMoviesList","fontFamily","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a91d0f6d.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = ({ onInputChange, onClickSearch, onInputPressEnter }) => {\n  return (\n    <div className='tc mt0 pt0 dib'>\n      <div className='f5 pa1 flex flex-row items-center'>\n        <label className='pr2'>Enter a movie name: </label>\n        <input onChange={onInputChange} onKeyDown={onInputPressEnter} />\n      </div>\n      <div className='pt3'>\n        <button className='ml1 pointer f5 no-underline br-pill ph4 pv2 white bg-black'\n          onClick={onClickSearch}>Search</button>\n      </div>\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\nimport './Card.css';\n\nconst Card = ({ movie, setSelectedMovie, selectedMovie }) => {\n  \n  let style = {};\n  if(selectedMovie.id === movie.id) {\n    style = {\n      border: '3px solid #333333',\n      width: '150px',\n      height: '225px'\n    }\n  } else {\n    style = {\n      border: '3px solid white',\n      width: '150px',\n      height: '225px'\n    }\n  }\n\n  return (\n    <div\n      className='card'\n      style={style}\n      onClick={() => setSelectedMovie(movie)}\n    >\n      {\n        movie.poster_path === null ?\n          <p className='relative ws-normal pa2'>{movie.original_title}</p>\n        :\n          <img\n            src={`http://image.tmdb.org/t/p/w200/${movie.poster_path}`}\n            alt=''\n            width='100%'\n            height='100%'\n          />\n      }\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react';\nimport './CardContainer.css';\nimport Card from '../Card/Card';\n\nconst CardContainer = ({ moviesList, selectedMovie, setSelectedMovie, route, onClickStartAgain }) => {\n\n  let containerClass = ''\n  if(route === 'search') { containerClass='scrollmenu' }\n  else { containerClass='noscrollmenu' }\n\n  return (\n    <div className='mt4'>\n      {\n        moviesList.length === 0\n        ?\n          <React.Fragment>{/* INTENTIONALLY BLANK */}</React.Fragment>\n        :\n          \n          <React.Fragment>\n            <div className='f5 dib pa3 mid-gray'>\n              {\n                route === 'search'\n                ?\n                  <p className='i fw7 pa0 ma0'>We found {moviesList.length} movies with that name.</p>\n                :\n                  <React.Fragment>\n                    <p className='i fw7 pa0 ma0 mb2'>Our top {moviesList.length} recommended movies.</p>\n                    <button\n                      className='ml1 pointer f5 no-underline br-pill ph4 pv2 white bg-black'\n                      onClick={onClickStartAgain}\n                    >\n                      Start Again\n                    </button>\n                  </React.Fragment>\n              }\n            </div>\n            <div className={containerClass}>\n              {\n                moviesList.map((movie,i) => {\n                  return <Card\n                    movie={movie}\n                    key={i}\n                    setSelectedMovie={setSelectedMovie}\n                    selectedMovie={selectedMovie}\n                  />\n                })\n              }\n            </div>\n          </React.Fragment>\n      }\n      \n    </div>\n  )\n}\n\nexport default CardContainer;","import React from 'react';\nimport './SelectedCardPanel.css';\n\nclass SelectedCardPanel extends React.Component {\n\n  genreIdToName = (genre_ids) => {\n    /*\n     * Convert the genre id codes to genre names\n     * ( get genreList from props )\n     */\n    var result = [];\n    genre_ids.forEach(id => {\n      this.props.genreList.forEach(item => {\n        if(item.id === id) result.push(item.name)\n      })\n    })\n    /* .join(\", \") adds commas between list items */\n    return result.join(\", \");\n  }\n\n  \n  render() {\n    const { original_title, release_date, overview, genre_ids } = this.props.selectedMovie;\n\n    return (\n      <div className='tl ma3' >\n        {\n          this.props.selectedMovie !== ''\n          ?\n            <div className='mid-gray'>\n              <div className='pa2'>\n                <div className='flex flex-row justify-between ma0 pa0 items-center'>\n                  <h2 className='ma0 pa0'>{original_title} ({release_date.slice(0,4)})</h2>\n                  <button\n                    className='ml1 pointer f5 no-underline br-pill ph4 pv2 white bg-black'\n                    onClick={this.props.getRecommendedMovies}\n                  >\n                    Recommend Similar Movies\n                  </button>\n                \n                </div>\n                <p>{this.genreIdToName(genre_ids)}</p>\n                <p>{overview}</p>\n              </div>\n            </div>\n          :\n            <React.Fragment></React.Fragment>\n        }\n      </div>\n    )\n  }\n}\n\nexport default SelectedCardPanel;","import React from 'react';\nimport SearchBox from './components/SearchBox/SearchBox';\nimport CardContainer from './components/CardContainer/CardContainer';\nimport SelectedCardPanel from './components/SelectedCardPanel/SelectedCardPanel';\nimport './App.css';\nimport 'tachyons';\nconst REACT_APP_API_URL = 'https://simple-movie-recommender.herokuapp.com';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    /* this.state.route default is 'search' */\n    this.state = {\n      input: '',\n      genreList: [],\n      moviesList: [],\n      selectedMovie: '',\n      recommendedMovies: [],\n      route: 'search'\n    }\n  }\n\n  componentDidMount() {\n    /* Fetch list of genres */\n    fetch(REACT_APP_API_URL+'/getGenres')\n    .then(response => response.json())\n    .then(data => this.setState({ genreList: data.genres }))\n  }\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value })\n  }\n\n  onInputPressEnter = (event) => {\n    if(event.keyCode === 13) { this.onClickSearch(); }\n  }\n\n  onClickSearch = () => {\n    if(this.state.input === '') return alert(\"Seach must include a name\");\n    this.setState({ moviesList: [], selectedMovie: '', getRecommendedMovies: [] });\n\n    /* call Movie Recommender API */\n    fetch(`${REACT_APP_API_URL}/searchByTitle`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ 'title': this.state.input })\n    })\n    .then(response => response.json())\n    .then(data => this.setState({ moviesList: data}))\n  }\n\n  setSelectedMovie = (movie) => {\n    this.setState({ selectedMovie: movie })\n  }\n\n  getRecommendedMovies = () => {\n    /* call Movie Recommender API */\n    fetch(`${REACT_APP_API_URL}/searchByGenres`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ 'genre_ids': this.state.selectedMovie.genre_ids })\n    })\n    .then(response => response.json())\n    .then(data => this.setState({ recommendedMovies: data}));\n\n    this.setState({ route: 'result' })  \n  }\n\n  onClickStartAgain = () => {\n    this.setState({\n      input: '',\n      genreList: [],\n      moviesList: [],\n      selectedMovie: '',\n      recommendedMovies: [],\n      route: 'search'\n    })\n  }\n\n  render() {\n    // console.log(this.state.moviesList)\n    \n    const {\n      moviesList,selectedMovie, route,\n      genreList, recommendedMovies\n    } = this.state;\n\n    const sort_param = 'popularity';\n\n    const sortedMoviesList = moviesList.sort((a, b) => {\n      return (a[sort_param] < b[sort_param]) ? 1 : -1\n    });\n    const sortedRecommendMoviesList = recommendedMovies.sort((a, b) => {\n      return (a[sort_param] < b[sort_param]) ? 1 : -1\n    }).slice(0,30);\n    \n    return (\n      <div className=\"App\">\n        <h1 style={{fontFamily: 'Roboto'}} className='mb3'>Movie Recommender</h1>\n        {\n          this.state.route === 'search'\n          ?\n            <React.Fragment>\n              <SearchBox\n                onClickSearch={this.onClickSearch}\n                onInputChange={this.onInputChange}\n                onInputPressEnter={this.onInputPressEnter}\n              />\n              <CardContainer\n                moviesList={sortedMoviesList}\n                selectedMovie={selectedMovie}\n                setSelectedMovie={this.setSelectedMovie}\n                route={route}\n                onClickStartAgain={this.onClickStartAgain}\n              />\n              <SelectedCardPanel\n                selectedMovie={selectedMovie}\n                genreList={genreList}\n                getRecommendedMovies={this.getRecommendedMovies}\n              />\n            </React.Fragment>\n          :\n            this.state.route === 'result'\n            ?\n              <React.Fragment>\n                <CardContainer\n                  moviesList={sortedRecommendMoviesList}\n                  selectedMovie={selectedMovie}\n                  setSelectedMovie={this.setSelectedMovie}\n                  route={route}\n                  onClickStartAgain={this.onClickStartAgain}\n                />\n              </React.Fragment>\n            :\n              <React.Fragment>{/* INTENTIONALLY BLANK */}</React.Fragment>\n        }\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}